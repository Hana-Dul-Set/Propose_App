import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    ext {
        kotlin_version = '1.8.10'
        agp_version = '8.1.0'
    }

    dependencies {
        classpath "com.vanniktech:gradle-dependency-graph-generator-plugin:0.8.0"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath("com.spotify.ruler:ruler-gradle-plugin:1.4.0")
        classpath("com.google.android.gms:oss-licenses-plugin:0.10.6") //라이선스 표시
    }
}// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id "org.jetbrains.kotlin.kapt" version "$kotlin_version" apply false
    id 'com.android.application' version "$agp_version" apply false
    id 'com.android.library' version '7.4.2' apply false
    id 'androidx.navigation.safeargs.kotlin' version '2.5.1' apply false
    id 'org.jetbrains.kotlin.android' version "$kotlin_version" apply false
    id 'com.google.dagger.hilt.android' version '2.48' apply false
    id 'com.google.devtools.ksp' version '1.8.10-1.0.9' apply false
    id "com.jraska.module.graph.assertion" version "2.5.0"

//    // Add the dependency for the Google services Gradle plugin
//    id 'com.google.gms.google-services' version '4.4.0' apply false
}
//apply {
//    from("./gradle/projectDependencyGraph.gradle")
//}


Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())



subprojects {
    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {

            freeCompilerArgs += [
                    "-P",
                    "plugin:androidx.compose.compiler.plugins.kotlin:reportsDestination=${rootProject.file(".").absolutePath}/report/compose-reports"
            ]


            freeCompilerArgs += [
                    "-P",
                    "plugin:androidx.compose.compiler.plugins.kotlin:metricsDestination= ${rootProject.file(".").absolutePath}/report/compose-reports"
            ]

        }
    }
    afterEvaluate { project ->


        if (project.hasProperty("android")) {

            Properties keyProperties = new Properties()
            keyProperties.load(project.rootProject.file('keystore.properties').newDataInputStream())

            android {
                compileSdk 34
                buildFeatures {
                    viewBinding true
                    if (project.getName() != "opencv") buildConfig true
                }


                defaultConfig {
                    minSdk 26
                    targetSdk 34
                    versionName '1.0.14'
                    versionCode 28
                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                    consumerProguardFiles "consumer-rules.pro"
                    if (project.getName() != "opencv") {
                        for (item in properties.keys()) {
                            if (item != "sdk.dir")
                                buildConfigField "String", "${item.toUpperCase()}", properties[item]
                        }
                    }

                }

                buildTypes {
                    release {
                        minifyEnabled false
                        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    }
                }
                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_17
                    targetCompatibility JavaVersion.VERSION_17
                }
                kotlinOptions {
                    jvmTarget = '17'
                }
            }
        }
    }
}